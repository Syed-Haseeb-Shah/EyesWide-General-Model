import cv2
import numpy as np

# Threshold to detect object
thres = 0.45
# NMS threshold
nms_threshold = 0.2

# Open webcam
cap = cv2.VideoCapture(0)

# Read class names from file
classNames = []
classFile = 'coco.names'  # Make sure to provide the correct path to your coco.names file
with open(classFile, 'rt') as f:
    classNames = f.read().rstrip('\n').split('\n')

# Load the pre-trained model
configPath = 'ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt'
weightsPath = 'frozen_inference_graph.pb'
net = cv2.dnn_DetectionModel(weightsPath, configPath)
net.setInputSize(320, 320)
net.setInputScale(1.0 / 127.5)
net.setInputMean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)

# Main loop
while True:
    # Read frame from webcam
    success, img = cap.read()
    if not success:
        break

    # Detect objects in the frame
    classIds, confs, bbox = net.detect(img, confThreshold=thres)

    # Convert bounding box and confidence values to lists
    bbox = list(bbox)
    confs = list(np.array(confs).reshape(1, -1)[0])
    confs = list(map(float, confs))

    # Apply Non-Maximum Suppression
    indices = cv2.dnn.NMSBoxes(bbox, confs, thres, nms_threshold)

    # Draw bounding boxes and labels
    if len(indices) > 0:
        for i in indices.flatten():
            # Check if classIds[i] is an array
            if isinstance(classIds[i], np.ndarray):
                for classId in classIds[i]:
                    classId = int(classId) - 1
                    if 0 <= classId < len(classNames):
                        className = classNames[classId].upper()  # Get the class name
                        box = bbox[i]
                        x, y, w, h = box[0], box[1], box[2], box[3]
                        cv2.rectangle(img, (x, y), (x + w, y + h), color=(0, 255, 0), thickness=2)
                        cv2.putText(img, className, (x + 10, y + 30), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
            else:
                # Extract single class ID
                classId = int(classIds[i]) - 1
                if 0 <= classId < len(classNames):
                    className = classNames[classId].upper()  # Get the class name
                    box = bbox[i]
                    x, y, w, h = box[0], box[1], box[2], box[3]
                    cv2.rectangle(img, (x, y), (x + w, y + h), color=(0, 255, 0), thickness=2)
                    cv2.putText(img, className, (x + 10, y + 30), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)

    # Display output
    cv2.imshow("Output", img)

    # Check for 'q' key press to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
